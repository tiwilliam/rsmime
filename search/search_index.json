{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#rsmime_1","title":"rsmime","text":"<p>Rust powered Python package for signing data in S/MIME format</p> <p></p>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#rsmime","title":"rsmime","text":""},{"location":"#rsmime.sign","title":"sign","text":"<pre><code>sign(\n    cert_file: str,\n    key_file: str,\n    data_to_sign: bytes,\n    *,\n    detached: bool = False\n) -&gt; bytes\n</code></pre> <p>Sign a message and return the signed S/MIME message.</p> <p>Parameters:</p> <ul> <li> <code>cert_file</code>             (<code>str</code>)         \u2013          <p>Path to certificate on disk.</p> </li> <li> <code>key_file</code>             (<code>str</code>)         \u2013          <p>Path to private key on disk.</p> </li> <li> <code>data_to_sign</code>             (<code>bytes</code>)         \u2013          <p>Data to sign.</p> </li> <li> <code>detached</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to return a detached signature. When set to <code>True</code>, the return value will be a multipart message with the signature in the plain text in the first part and the signature in the second part. When set to <code>False</code> the return value will be the signature without any additional wrapping.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bytes</code>         \u2013          <p>Signed S/MIME message.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CertificateError</code>           \u2013          <p>If there is an error with the input certificate.</p> </li> <li> <code>SignError</code>           \u2013          <p>If there is an error signing the data.</p> </li> </ul>"},{"location":"#rsmime.verify","title":"verify","text":"<pre><code>verify(\n    data_to_verify: bytes, throw_on_expired: bool = False\n) -&gt; bytes\n</code></pre> <p>Verify a signed message and return the raw message data.</p> <p>Parameters:</p> <ul> <li> <code>data_to_verify</code>             (<code>bytes</code>)         \u2013          <p>The signed message to verify.</p> </li> <li> <code>throw_on_expired</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to throw an exception if any certificate in the message has expired.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bytes</code>         \u2013          <p>Raw message data.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>VerifyError</code>           \u2013          <p>If there is an error verifying the message.</p> </li> <li> <code>CertificateExpiredError</code>           \u2013          <p>If any certificate in the message has expired. Thrown only if <code>throw_on_expired</code> is <code>True</code>.</p> </li> </ul>"},{"location":"#rsmime.exceptions","title":"rsmime.exceptions","text":""},{"location":"#rsmime.exceptions.RsmimeError","title":"RsmimeError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions in this module.</p>"},{"location":"#rsmime.exceptions.CertificateError","title":"CertificateError","text":"<p>             Bases: <code>RsmimeError</code></p> <p>Thrown when there is an error with the input certificate.</p>"},{"location":"#rsmime.exceptions.CertificateExpiredError","title":"CertificateExpiredError","text":"<p>             Bases: <code>CertificateError</code></p> <p>Thrown when any certificate in the message has expired.</p>"},{"location":"#rsmime.exceptions.SignError","title":"SignError","text":"<p>             Bases: <code>RsmimeError</code></p> <p>Thrown when there is an error signing the data.</p>"},{"location":"#rsmime.exceptions.VerifyError","title":"VerifyError","text":"<p>             Bases: <code>RsmimeError</code></p> <p>Thrown when there is an error verifying the data.</p>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#install","title":"Install","text":"<p>To install the latest version of rsmime, run the following command:</p> <pre><code>pip install rsmime\n</code></pre>"},{"location":"getting_started/#sign-an-attached-message","title":"Sign an attached message","text":"<pre><code>import rsmime\nfrom rsmime.exceptions import SignError, CertificateError\n\nraw_data = b'Some data to sign'\n\ntry:\n    signed_data = rsmime.sign('some.crt', 'some.key', raw_data)\n    print(signed_data.decode())\nexcept (SignError, CertificateError) as e:\n    print(\"Failed to sign:\", e)\n</code></pre>"},{"location":"getting_started/#output","title":"Output","text":"<pre><code>$ python sign.py\nMIME-Version: 1.0\nContent-Disposition: attachment; filename=\"smime.p7m\"\nContent-Type: application/x-pkcs7-mime; smime-type=signed-data; name=\"smime.p7m\"\nContent-Transfer-Encoding: base64\n\nMIIJbwYJKoZIhvcNAQcCoIIJYDCCCVwCAQExDzANBglghkgBZQMEAgEFADAwBgkq\n...\ngRUKfNnUOID3xMWl65crFoIyCA==\n</code></pre>"},{"location":"getting_started/#sign-a-detached-message","title":"Sign a detached message","text":"<pre><code>import rsmime\nfrom rsmime.exceptions import SignError, CertificateError\n\nraw_data = b'Some data to sign'\n\ntry:\n    signed_data = rsmime.sign('some.crt', 'some.key', raw_data, detached=True)\n    print(signed_data.decode())\nexcept (SignError, CertificateError) as e:\n    print(\"Failed to sign:\", e)\n</code></pre>"},{"location":"getting_started/#output_1","title":"Output","text":"<pre><code>$ python sign.py\nMIME-Version: 1.0\nContent-Type: multipart/signed; protocol=\"application/x-pkcs7-signature\"; micalg=\"sha-256\"; boundary=\"----105EE7840E51906DEE5D8D34C7B68CFA\"\n\nThis is an S/MIME signed message\n\n------105EE7840E51906DEE5D8D34C7B68CFA\nSome data to sign\n------105EE7840E51906DEE5D8D34C7B68CFA\nContent-Type: application/x-pkcs7-signature; name=\"smime.p7s\"\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename=\"smime.p7s\"\n\nMIIJSgYJKoZIhvcNAQcCoIIJOzCCCTcCAQExDzANBglghkgBZQMEAgEFADALBgkq\n...\nlV7oyQKEY6sVyQkWP2rPmtPs85hsmZGmej0Tx4x7\n\n------105EE7840E51906DEE5D8D34C7B68CFA--\n</code></pre>"},{"location":"getting_started/#verify-a-signed-message","title":"Verify a signed message","text":"<pre><code>import rsmime\nfrom rsmime.exceptions import VerifyError\n\nsigned_data = b'...'\n\ntry:\n    raw_again = rsmime.verify(signed_data)\n    print(raw_again.decode())\nexcept VerifyError as e:\n    print(\"Failed to verify:\", e)\n</code></pre>"},{"location":"getting_started/#output_2","title":"Output","text":"<pre><code>$ python verify.py\nSome data to sign\n</code></pre>"}]}